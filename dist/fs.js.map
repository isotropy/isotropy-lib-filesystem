{"version":3,"sources":["../src/fs.js"],"names":["dirPath","entries","fs","readdir","stats","Promise","all","map","lstat","path","join","filename","then","isDirectory","stat","filter","item","getFilesInPath","folders","files","filesInDirectory","push","length","getFilesInPathRecursively","pop","contents","pathExists","exists","outputFile","createFile","recurse","getFiles","readFile","newPath","move","moveFile","updateFile","unlink","deleteFile","newDirPath","moveDir","require"],"mappings":"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","file":"fs.js","sourcesContent":["const fs = require(\"fs-extra\");\nconst path = require(\"path\");\n\nasync function getFilesInPath(dirPath) {\n  const entries = await fs.readdir(dirPath);\n  const stats = await Promise.all(\n    entries.map(filename =>\n      fs.lstat(path.join(dirPath, filename)).then(stat => ({\n        filename,\n        isDirectory: stat.isDirectory()\n      }))\n    )\n  );\n  return stats\n    .filter(item => !item.isDirectory)\n    .map(item => path.join(dirPath, item.filename));\n}\n\nasync function getFilesInPathRecursively(dirPath, folders = [], files = []) {\n  const entries = await fs.readdir(dirPath);\n  const stats = await Promise.all(\n    entries.map(filename =>\n      fs.lstat(path.join(dirPath, filename)).then(stat => ({\n        filename,\n        isDirectory: stat.isDirectory()\n      }))\n    )\n  );\n  const filesInDirectory = stats\n    .filter(item => {\n      if (item.isDirectory) folders.push(path.join(dirPath, item.filename));\n      return !item.isDirectory;\n    })\n    .map(item => path.join(dirPath, item.filename));\n\n  files.push(...filesInDirectory);\n  if (folders.length < 1) return files;\n  return getFilesInPathRecursively(folders.pop(), folders, files);\n}\n\nexport async function createFile(path, contents = \"\") {\n  return await fs\n  .pathExists(path)\n  .then(exists => (exists ? null : fs.outputFile(path, contents)));\n}\n\nexport async function getFiles(dirPath, recurse = false) {\n  if (recurse === false) return await getFilesInPath(dirPath);\n  return await getFilesInPathRecursively(dirPath);\n}\n\nexport async function readFile(path) {\n  return await fs.readFile(path, \"utf8\").then(contents => ({ contents }));\n}\n\nexport async function moveFile(path, newPath) {\n  return await fs.move(path, newPath);\n}\n\nexport async function updateFile(path, contents) {\n  return await fs.outputFile(path, contents);\n}\n\nexport async function deleteFile(path) {\n  return await fs.unlink(path);\n}\n\nexport async function moveDir(dirPath, newDirPath) {\n  return await moveFile(dirPath, newDirPath);\n}\n"]}